#include "HybridImageCompressor.hpp"
#include "CompressionOptions.hpp"
#include "HybridCompressedImageAsset.hpp"
#include "ImageUtils.hpp"
#include <filesystem>
#include <opencv2/opencv.hpp>
#include <stdexcept>
#if __has_include("ImageCompressor-Swift.h")
#include "ImageCompressor-Swift.h"
#elif __has_include(<ImageCompressor/ImageCompressor-Swift.h>)
else
#error ImageCompressor's autogenerated Swift header cannot be found! Make sure the Swift module's name (= podspec name) is actually "ImageCompressor", and try building the app first.
#endif

std::filesystem::path tmpImagePath;

namespace margelo::nitro::imagecompressor {

  std::shared_ptr<margelo::nitro::imagecompressor::HybridCompressedImageAssetSpec>
  HybridImageCompressor::compress(const ImageAsset& image, const std::optional<CompressionOptions>& options) {
    auto result = ImageUtils::compressImage(image, options);
    tmpImagePath = result.get()->getUri(); // Store the path for later use
    return result;
  }

  bool HybridImageCompressor::saveImage(const std::string& uri) {
    if (tmpImagePath.empty()) {
      throw std::runtime_error("No compressed image available. Call compress() first.");
    }

    if (!std::filesystem::exists(tmpImagePath)) {
      throw std::runtime_error("Compressed image file no longer exists at path: " + tmpImagePath.string());
    }
#if __APPLE__
#if __has_include("ImageCompressor-Swift.h")
    return ImageCompressor::saveImageToPhotos(tmpImagePath.string());
#else  // <-- if doesn't have include "ImageCompressor-Swift.h"
    return false;
#endif // <-- ends #if __has_include("ImageCompressor-Swift.h")
#else  // <-- if it's not apple
    return false;
#endif // <-- ends #if __APPLE__
  }
} // namespace margelo::nitro::imagecompressor
