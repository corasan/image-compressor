#include "HybridCompressedImageAsset.hpp"
#include <NitroModules/Promise.hpp>

#if __has_include("ImageCompressor_jni.hpp")
#include "ImageCompressor_jni.hpp"
#elif __has_include(<ImageCompressor/ImageCompressor_jni.hpp>)
#else
#error ImageCompressor's autogenerated JNI header cannot be found! Make sure the JNI module's name (= podspec name) is actually "ImageCompressor", and try building the app first.
#endif

#if __has_include("ImageCompressor-Swift.h")
#include "ImageCompressor-Swift.h"
#elif __has_include(<ImageCompressor/ImageCompressor-Swift.h>)
else
#error ImageCompressor's autogenerated Swift header cannot be found! Make sure the Swift module's name (= podspec name) is actually "ImageCompressor", and try building the app first.
#endif

namespace margelo::nitro::imagecompressor {
  std::shared_ptr<Promise<bool>> HybridCompressedImageAsset::save() {
    auto promise = Promise<bool>::create();
#if __has_include("ImageCompressor-Swift.h")
    bool result = ImageCompressor::saveImageToPhotos(_uri);
    promise->resolve(result);
    return promise;
#elif __has_include("ImageCompressor_jni.hpp")
    printf("ImageCompressor_jni.hpp\n");
    bool result = ImageCompressor_jni::saveImageToPhotos(_uri);
    promise->resolve(result);
    return promise;
#else
    promise->reject(std::make_exception_ptr(std::runtime_error(
        "ImageCompressor's autogenerated JNI header cannot be found! Make sure the JNI module's "
        "name (= "
        "podspec name) is actually \"ImageCompressor\", and try building the app first.")));
    return promise;
#endif
  }
} // namespace margelo::nitro::imagecompressor